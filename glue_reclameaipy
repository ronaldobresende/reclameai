import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsgluedq.transforms import EvaluateDataQuality

args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Default ruleset used by all target nodes with data quality enabled
DEFAULT_DATA_QUALITY_RULESET = """
    Rules = [
        ColumnCount > 0
    ]
"""

# Script generated for node nps-mock
npsmock_node1744250830223 = glueContext.create_dynamic_frame.from_options(format_options={"quoteChar": "\"", "withHeader": True, "separator": ",", "optimizePerformance": False}, connection_type="s3", format="csv", connection_options={"paths": ["s3://s3-768471683026-sor/nps_mock.csv"], "recurse": True}, transformation_ctx="npsmock_node1744250830223")

# Script generated for node Amazon S3
EvaluateDataQuality().process_rows(frame=npsmock_node1744250830223, ruleset=DEFAULT_DATA_QUALITY_RULESET, publishing_options={"dataQualityEvaluationContext": "EvaluateDataQuality_node1744250822706", "enableDataQualityResultsPublishing": True}, additional_options={"dataQualityResultsPublishing.strategy": "BEST_EFFORT", "observations.scope": "ALL"})
AmazonS3_node1744251222434 = glueContext.getSink(path="s3://s3-768471683026-sor", connection_type="s3", updateBehavior="UPDATE_IN_DATABASE", partitionKeys=["anomesdia"], enableUpdateCatalog=True, transformation_ctx="AmazonS3_node1744251222434")
AmazonS3_node1744251222434.setCatalogInfo(catalogDatabase="db_reclameai",catalogTableName="tb_reclamacoes_original")
AmazonS3_node1744251222434.setFormat("glueparquet", compression="snappy")
AmazonS3_node1744251222434.writeFrame(npsmock_node1744250830223)
job.commit()